{"version":3,"sources":["NewNote.js","Note.js","NoteList.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["NewNote","props","handleClick","state","title","content","c","description","time","Moment","calendar","key","Date","now","index","addNote","setState","className","id","type","value","this","onChange","e","target","onClick","React","Component","Note","changeCard","editNote","isEditing","note","Card","CardContent","removeNote","NoteList","list","notes","map","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","componentDidMount","database","once","snapshot","exists","val","prevState","set","updatedNotes","filter","curnote","console","log","child","remove","thisNote","newNotes","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9bf76180.chunk.js","sourcesContent":["import React from 'react';\r\nimport Moment from 'moment';\r\nimport './NewNote.css'\r\n\r\nclass NewNote extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: \"\",\r\n            description: \"\",\r\n            content: \"\",\r\n        };\r\n    }\r\n\r\n    handleClick = () => {\r\n        if (this.state.title !== \"\" || this.state.content !== \"\") {\r\n            const c = {\r\n                title: this.state.title,\r\n                description: this.state.description,\r\n                content: this.state.content,\r\n                time: Moment().calendar(),\r\n                key: Date.now(),\r\n                index: Date.now(),\r\n            }\r\n            this.props.addNote(c)\r\n            this.setState({ title: \"\", content: \"\", description: \"\" })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"NewNote\">\r\n                <div className=\"heading\">\r\n                    <label>Title: </label>\r\n                    <input\r\n                        className=\"title\"\r\n                        id=\"noteTitle\"\r\n                        type=\"text\"\r\n                        value={this.state.title}\r\n                        onChange={e => this.setState({ title: e.target.value })}\r\n                    />\r\n                    <label>Description: </label>\r\n                    <input\r\n                        className=\"description\"\r\n                        id=\"noteInput\"\r\n                        type=\"text\"\r\n                        value={this.state.description}\r\n                        onChange={e => this.setState({ description: e.target.value })}\r\n                    />\r\n                </div>\r\n                <label>Note: </label>\r\n                <textarea\r\n                    className=\"content\"\r\n                    id=\"noteContent\"\r\n                    value={this.state.content}\r\n                    onChange={e => this.setState({ content: e.target.value })}\r\n                />\r\n                <button className=\"button\" onClick={this.handleClick}>\r\n                    Save Note\r\n                </button>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default NewNote;","import React, { Component } from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Moment from 'moment';\r\nimport './Note.css'\r\n\r\nclass Note extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: this.props.note.title,\r\n            content: this.props.note.content,\r\n            description: this.props.note.description,\r\n            isEditing: false\r\n        }\r\n    }\r\n\r\n    changeCard = () => {\r\n        const c = {\r\n            title: this.state.title,\r\n            content: this.state.content,\r\n            description: this.state.description,\r\n            time: Moment().calendar()\r\n        }\r\n        this.props.editNote(c, this.props.index)\r\n        this.setState({ isEditing: false })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Note\">\r\n                <Card>\r\n                    <CardContent id=\"card\">\r\n                        {(this.state.isEditing) ?\r\n                            <div>\r\n                                <div className=\"labels\">\r\n                                    <input className=\"title\" type=\"text\" onChange={e => this.setState({ title: e.target.value })} value={this.state.title} />\r\n                                    <input className=\"description\" type=\"text\" onChange={e => this.setState({ description: e.target.value })} value={this.state.description} />\r\n                                    <textarea className=\"content\" onChange={e => this.setState({ content: e.target.value })} value={this.state.content} />\r\n                                </div>\r\n                                <p> {this.props.note.time} </p>\r\n                                <button onClick={this.changeCard}>Save Edits</button>\r\n                                <button onClick={() => this.props.removeNote(this.props.note)}>Delete Note</button>\r\n                            </div>\r\n                            :\r\n                            <div>\r\n                                <p>Title: {this.state.title}</p>\r\n                                <p>Description: {this.state.description}</p>\r\n                                <p>Note: {this.state.content}</p>\r\n                                <button className=\"button\" onClick={() => this.setState({ isEditing: true })}>\r\n                                    Edit Note\r\n                                </button>\r\n                                <button onClick={() => this.props.removeNote(this.props.note)}>Delete Note</button>\r\n                            </div>\r\n                        }\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Note;","import React, { Component } from \"react\";\r\nimport Note from './Note.js'\r\n\r\nclass NoteList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var list = this.props.notes.map((note, index) => {\r\n            return (\r\n                <Note\r\n                    index={index} note={note} editNote={this.props.editNote} removeNote={this.props.removeNote}\r\n                    notes={this.props.notes}>\r\n                </Note>\r\n            )\r\n        })\r\n        return (\r\n            <div className=\"NoteList\">\r\n                {list}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NoteList;","import firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyBo22edHcyvvcx733QILfGs6AuXkOVSqHk\",\r\n    authDomain: \"notesapplication-74fdb.firebaseapp.com\",\r\n    databaseURL: \"https://notesapplication-74fdb.firebaseio.com\",\r\n    projectId: \"notesapplication-74fdb\",\r\n    storageBucket: \"notesapplication-74fdb.appspot.com\",\r\n    messagingSenderId: \"496447756319\",\r\n    appId: \"1:496447756319:web:e0a9e0cace8376a9809d2a\",\r\n    measurementId: \"G-CGGBQZE2GJ\"\r\n}\r\n\r\nfirebase.initializeApp(config);\r\nexport default firebase;","import React, { Component } from 'react';\nimport './App.css';\nimport NewNote from \"./NewNote.js\";\nimport NoteList from \"./NoteList.js\";\nimport firebase from './firebase.js';\n\nclass App extends Component {\n  constructor(props) {\n    super (props);\n    this.state = {\n      notes: [],\n      database: firebase.database().ref(\"notes\"),\n    }\n  }\n\n  componentDidMount = () => {\n    this.state.database.once(\"value\", snapshot => {\n      if (snapshot && snapshot.exists()) {\n        let notes = snapshot.val();\n        this.setState({ notes: notes })\n      }\n    })\n  }\n\n  addNote = note => {\n    this.setState(prevState => {\n      return { notes: [...prevState.notes, note] };\n    })\n    this.state.database.set(this.state.notes);\n  }\n\n  removeNote = note => {\n    const updatedNotes = this.state.notes.filter(\n      curnote => curnote.index !== note.index\n    );\n    console.log(updatedNotes)   // remove console.log when done\n    this.setState(prevState => {\n      return ({ notes: updatedNotes });\n    })\n    this.state.database.child(note.index).remove();\n  }\n\n  editNote = (thisNote, index) => {\n    var newNotes = [...this.state.notes]\n    newNotes[index] = thisNote;\n    this.setState ({notes : newNotes}) ;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Create a New Note: </h1>\n        <NewNote addNote = {this.addNote} />\n        <h1>Your Current Notes: </h1>\n        <NoteList \n          notes = {this.state.notes}\n          removeNote = {this.removeNote}\n          editNote = {this.editNote}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}